{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoSecureStore from \"./ExpoSecureStore\";\nexport var AFTER_FIRST_UNLOCK = ExpoSecureStore.AFTER_FIRST_UNLOCK;\nexport var AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY = ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\nexport var ALWAYS = ExpoSecureStore.ALWAYS;\nexport var WHEN_PASSCODE_SET_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\nexport var ALWAYS_THIS_DEVICE_ONLY = ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\nexport var WHEN_UNLOCKED = ExpoSecureStore.WHEN_UNLOCKED;\nexport var WHEN_UNLOCKED_THIS_DEVICE_ONLY = ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\nvar VALUE_BYTES_LIMIT = 2048;\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    return !!ExpoSecureStore.getValueWithKeyAsync;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function deleteItemAsync(_x) {\n  return _deleteItemAsync.apply(this, arguments);\n}\nfunction _deleteItemAsync() {\n  _deleteItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _ensureValidKey(key);\n    if (!ExpoSecureStore.deleteValueWithKeyAsync) {\n      throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n    }\n    yield ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n  });\n  return _deleteItemAsync.apply(this, arguments);\n}\nexport function getItemAsync(_x2) {\n  return _getItemAsync.apply(this, arguments);\n}\nfunction _getItemAsync() {\n  _getItemAsync = _asyncToGenerator(function* (key) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _ensureValidKey(key);\n    return yield ExpoSecureStore.getValueWithKeyAsync(key, options);\n  });\n  return _getItemAsync.apply(this, arguments);\n}\nexport function setItemAsync(_x3, _x4) {\n  return _setItemAsync.apply(this, arguments);\n}\nfunction _setItemAsync() {\n  _setItemAsync = _asyncToGenerator(function* (key, value) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    _ensureValidKey(key);\n    if (!_isValidValue(value)) {\n      throw new Error(\"Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.\");\n    }\n    if (!ExpoSecureStore.setValueWithKeyAsync) {\n      throw new UnavailabilityError('SecureStore', 'setItemAsync');\n    }\n    yield ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n  });\n  return _setItemAsync.apply(this, arguments);\n}\nfunction _ensureValidKey(key) {\n  if (!_isValidKey(key)) {\n    throw new Error(\"Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \\\".\\\", \\\"-\\\", and \\\"_\\\".\");\n  }\n}\nfunction _isValidKey(key) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\nfunction _isValidValue(value) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (_byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn('Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.');\n  }\n  return true;\n}\nfunction _byteCount(value) {\n  var bytes = 0;\n  for (var i = 0; i < value.length; i++) {\n    var codePoint = value.charCodeAt(i);\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        var next = value.charCodeAt(i + 1);\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n  return bytes;\n}","map":{"version":3,"sources":["../src/SecureStore.ts"],"names":[],"mappings":"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","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoSecureStore from './ExpoSecureStore';\n\nexport type KeychainAccessibilityConstant = number;\n\n// @needsAudit\n/**\n * The data in the keychain item cannot be accessed after a restart until the device has been\n * unlocked once by the user. This may be useful if you need to access the item when the phone\n * is locked.\n */\nexport const AFTER_FIRST_UNLOCK: KeychainAccessibilityConstant = ExpoSecureStore.AFTER_FIRST_UNLOCK;\n\n// @needsAudit\n/**\n * Similar to `AFTER_FIRST_UNLOCK`, except the entry is not migrated to a new device when restoring\n * from a backup.\n */\nexport const AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.AFTER_FIRST_UNLOCK_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can always be accessed regardless of whether the device is locked.\n * This is the least secure option.\n */\nexport const ALWAYS: KeychainAccessibilityConstant = ExpoSecureStore.ALWAYS;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED_THIS_DEVICE_ONLY`, except the user must have set a passcode in order to\n * store an entry. If the user removes their passcode, the entry will be deleted.\n */\nexport const WHEN_PASSCODE_SET_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_PASSCODE_SET_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * Similar to `ALWAYS`, except the entry is not migrated to a new device when restoring from a backup.\n */\nexport const ALWAYS_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.ALWAYS_THIS_DEVICE_ONLY;\n\n// @needsAudit\n/**\n * The data in the keychain item can be accessed only while the device is unlocked by the user.\n */\nexport const WHEN_UNLOCKED: KeychainAccessibilityConstant = ExpoSecureStore.WHEN_UNLOCKED;\n\n// @needsAudit\n/**\n * Similar to `WHEN_UNLOCKED`, except the entry is not migrated to a new device when restoring from\n * a backup.\n */\nexport const WHEN_UNLOCKED_THIS_DEVICE_ONLY: KeychainAccessibilityConstant =\n  ExpoSecureStore.WHEN_UNLOCKED_THIS_DEVICE_ONLY;\n\nconst VALUE_BYTES_LIMIT = 2048;\n\n// @needsAudit\nexport type SecureStoreOptions = {\n  /**\n   * - iOS: The item's service, equivalent to `kSecAttrService`\n   * - Android: Equivalent of the public/private key pair `Alias`\n   * > If the item is set with the `keychainService` option, it will be required to later fetch the value.\n   */\n  keychainService?: string;\n  /**\n   * Option responsible for enabling the usage of the user authentication methods available on the device while\n   * accessing data stored in SecureStore.\n   * - iOS: Equivalent to `kSecAccessControlBiometryCurrentSet`\n   * - Android: Equivalent to `setUserAuthenticationRequired(true)` (requires API 23).\n   * Complete functionality is unlocked only with a freshly generated key - this would not work in tandem with the `keychainService`\n   * value used for the others non-authenticated operations.\n   */\n  requireAuthentication?: boolean;\n  /**\n   * Custom message displayed to the user while `requireAuthentication` option is turned on.\n   */\n  authenticationPrompt?: string;\n  /**\n   * Specifies when the stored entry is accessible, using iOS's `kSecAttrAccessible` property.\n   * @see Apple's documentation on [keychain item accessibility](https://developer.apple.com/library/content/documentation/Security/Conceptual/keychainServConcepts/02concepts/concepts.html#//apple_ref/doc/uid/TP30000897-CH204-SW18).\n   * @default SecureStore.WHEN_UNLOCKED\n   * @platform ios\n   */\n  keychainAccessible?: KeychainAccessibilityConstant;\n};\n\n// @needsAudit\n/**\n * Returns whether the SecureStore API is enabled on the current device. This does not check the app\n * permissions.\n *\n * @return Promise which fulfils witch `boolean`, indicating whether the SecureStore API is available\n * on the current device. Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoSecureStore.getValueWithKeyAsync;\n}\n\n// @needsAudit\n/**\n * Delete the value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if the value couldn't be deleted.\n */\nexport async function deleteItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n\n  if (!ExpoSecureStore.deleteValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'deleteItemAsync');\n  }\n  await ExpoSecureStore.deleteValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Fetch the stored value associated with the provided key.\n *\n * @param key The key that was used to store the associated value.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that resolves to the previously stored value, or `null` if there is no entry\n * for the given key. The promise will reject if an error occurred while retrieving the value.\n */\nexport async function getItemAsync(\n  key: string,\n  options: SecureStoreOptions = {}\n): Promise<string | null> {\n  _ensureValidKey(key);\n  return await ExpoSecureStore.getValueWithKeyAsync(key, options);\n}\n\n// @needsAudit\n/**\n * Store a key–value pair.\n *\n * @param key The key to associate with the stored value. Keys may contain alphanumeric characters\n * `.`, `-`, and `_`.\n * @param value The value to store. Size limit is 2048 bytes.\n * @param options An [`SecureStoreOptions`](#securestoreoptions) object.\n *\n * @return A promise that will reject if value cannot be stored on the device.\n */\nexport async function setItemAsync(\n  key: string,\n  value: string,\n  options: SecureStoreOptions = {}\n): Promise<void> {\n  _ensureValidKey(key);\n  if (!_isValidValue(value)) {\n    throw new Error(\n      `Invalid value provided to SecureStore. Values must be strings; consider JSON-encoding your values if they are serializable.`\n    );\n  }\n  if (!ExpoSecureStore.setValueWithKeyAsync) {\n    throw new UnavailabilityError('SecureStore', 'setItemAsync');\n  }\n  await ExpoSecureStore.setValueWithKeyAsync(value, key, options);\n}\n\nfunction _ensureValidKey(key: string) {\n  if (!_isValidKey(key)) {\n    throw new Error(\n      `Invalid key provided to SecureStore. Keys must not be empty and contain only alphanumeric characters, \".\", \"-\", and \"_\".`\n    );\n  }\n}\n\nfunction _isValidKey(key: string) {\n  return typeof key === 'string' && /^[\\w.-]+$/.test(key);\n}\n\nfunction _isValidValue(value: string) {\n  if (typeof value !== 'string') {\n    return false;\n  }\n  if (_byteCount(value) > VALUE_BYTES_LIMIT) {\n    console.warn(\n      'Provided value to SecureStore is larger than 2048 bytes. An attempt to store such a value will throw an error in SDK 35.'\n    );\n  }\n  return true;\n}\n\n// copy-pasted from https://stackoverflow.com/a/39488643\nfunction _byteCount(value: string) {\n  let bytes = 0;\n\n  for (let i = 0; i < value.length; i++) {\n    const codePoint = value.charCodeAt(i);\n\n    // Lone surrogates cannot be passed to encodeURI\n    if (codePoint >= 0xd800 && codePoint < 0xe000) {\n      if (codePoint < 0xdc00 && i + 1 < value.length) {\n        const next = value.charCodeAt(i + 1);\n\n        if (next >= 0xdc00 && next < 0xe000) {\n          bytes += 4;\n          i++;\n          continue;\n        }\n      }\n    }\n\n    bytes += codePoint < 0x80 ? 1 : codePoint < 0x800 ? 2 : 3;\n  }\n\n  return bytes;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}